// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: proto/greet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Greetings_SayHelloBidirectionalStreaming_FullMethodName = "/greetings.Greetings/SayHelloBidirectionalStreaming"
)

// GreetingsClient is the client API for Greetings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetingsClient interface {
	SayHelloBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (Greetings_SayHelloBidirectionalStreamingClient, error)
}

type greetingsClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetingsClient(cc grpc.ClientConnInterface) GreetingsClient {
	return &greetingsClient{cc}
}

func (c *greetingsClient) SayHelloBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (Greetings_SayHelloBidirectionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greetings_ServiceDesc.Streams[0], Greetings_SayHelloBidirectionalStreaming_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greetingsSayHelloBidirectionalStreamingClient{stream}
	return x, nil
}

type Greetings_SayHelloBidirectionalStreamingClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type greetingsSayHelloBidirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *greetingsSayHelloBidirectionalStreamingClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetingsSayHelloBidirectionalStreamingClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetingsServer is the server API for Greetings service.
// All implementations must embed UnimplementedGreetingsServer
// for forward compatibility
type GreetingsServer interface {
	SayHelloBidirectionalStreaming(Greetings_SayHelloBidirectionalStreamingServer) error
	mustEmbedUnimplementedGreetingsServer()
}

// UnimplementedGreetingsServer must be embedded to have forward compatible implementations.
type UnimplementedGreetingsServer struct {
}

func (UnimplementedGreetingsServer) SayHelloBidirectionalStreaming(Greetings_SayHelloBidirectionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloBidirectionalStreaming not implemented")
}
func (UnimplementedGreetingsServer) mustEmbedUnimplementedGreetingsServer() {}

// UnsafeGreetingsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetingsServer will
// result in compilation errors.
type UnsafeGreetingsServer interface {
	mustEmbedUnimplementedGreetingsServer()
}

func RegisterGreetingsServer(s grpc.ServiceRegistrar, srv GreetingsServer) {
	s.RegisterService(&Greetings_ServiceDesc, srv)
}

func _Greetings_SayHelloBidirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetingsServer).SayHelloBidirectionalStreaming(&greetingsSayHelloBidirectionalStreamingServer{stream})
}

type Greetings_SayHelloBidirectionalStreamingServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greetingsSayHelloBidirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *greetingsSayHelloBidirectionalStreamingServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetingsSayHelloBidirectionalStreamingServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Greetings_ServiceDesc is the grpc.ServiceDesc for Greetings service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greetings_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greetings.Greetings",
	HandlerType: (*GreetingsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloBidirectionalStreaming",
			Handler:       _Greetings_SayHelloBidirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/greet.proto",
}
